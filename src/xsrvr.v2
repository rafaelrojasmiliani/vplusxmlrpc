.PROGRAM ubz.xmlrpc.srvr()
.END


.PROGRAM xmlrpc.srvr($port,$methods[],methods.num)
; DESCRIPTION
; -----------
; Implements a blocking XMLRC server able to associate to each a call a V+
; method. This association is done thanks to the CALLS function of V+. CALLS is
; able to call a V+ procedure using a string. So if the XMLRPC call corresponds
; to a defined method, V+ will call that method with the corresponding arguments.
; FIXME: CALLS is not optimal. This is an ad hoc solution.
; FIXME: shall we use a "buffer" of tasks or create a task for each call? (no?)
;
; PARAMETERS:
; ----------
;  $port, string listing port in string format
;  $methods[] array of strings with method list
;  methods.num  int number of methods
;
; PROCEDURE:
; ---------
;  1) Create a listening socket in the desired port
;  2) While (TRUE) loop
;  2.1) As specified in the HTTP protocol, once a connection is
;     initiated by a client, we fill up a buffer until the
;     client closes the connection as follows:
;  2.1.1) Parse the header of the HTTP message and get the length
;         of the message.
;  2.1.2) Fill up the buffer reading from the socket until the total
;         length is reached
;  2.2) Parse the XMLRPC message
;  2.3) If the XMLRPC call name coincides with a name in $methods[] call
;       such a method using CALLS.
  LOCAL $bf00[]
  LOCAL $msg[]
  LOCAL $it[]
  LOCAL $iv[]
  AUTO REAL iargn
  AUTO REAL oargn
  LOCAL $ot[]
  LOCAL $ov[]
  AUTO $mth.str
  AUTO REAL handle
  AUTO REAL stat
  AUTO REAL mth.id
  AUTO REAL meth.id
  AUTO REAL msg.delen
  AUTO REAL msg.len

  stat= 0
  handle = 0
  CALL stai($bf00[])
  CALL stai($msg[])

  CALL soc.srv(soc,$port,"1")

  IF soc==0 THEN
    TYPE "ERROR OPENING SOCKET"
    RETURN
  END


  WHILE 1 DO
    ; FIXME: here we have a memory limit for the
    ;        received message given by the definition
    ;        of read3array. The maximum length of the
    ;        message shall be implemented directly here
    ;        and we shall write functions able to reading
    ;        arbitrarily lengths
    CALL read3array(soc,handle,$bf00[],stat) 
    CASE stat OF
      VALUE 100:; state OF the socket after a new connection
      VALUE 1:
        ; state OF the socket faster data received
	      CALL stai($msg[]); init msg buffer
        ;copy received data TO msg
        CALL staasa($msg[],$bf00[])
        ;compute xmlrpc size
        CALL httpms($msg[],msg.delen,msg.len)
        WHILE msg.len < msg.delen DO
          CALL read2array(soc,handle,$bf00[],stat)
          CALL staasa($msg[],$bf00[])
          CALL httpms($msg[],msg.delen,msg.len)
        END
        CALL xmlrpc.call.get($msg[],$mth.str,iargn,$iv[],$it[])
;        FOR m=1 TO pars
;          TYPE "paramenter TYPE = "+$it[m-1]
;          TYPE "paramenter value = "+$iv[m-1]
;        END
		    meth.id=0
		    DO
		     IF(STRDIF($mth.str,$methods[meth.id])==0) THEN 
          EXIT
         END
		     meth.id = meth.id + 1
		    UNTIL (meth.id==methods.num)

        IF (meth.id==methods.num) THEN
          TYPE "Error, method can't be found"
          $ov[0]="Function not defined"
          $ot[0]="string"
          CALL xmlrpc.gen.fault("1","function does not exists",$msg[])
        ELSE
          CALLS $mth.str(iargn,$iv[],$it[],oargn,$ov[],$ot[])
          CALL xmlrpc.gen.res(oargn,$ov[],$ot[],$msg[])
        END
        CALL write2array(soc,handle,$msg[])
        ;close connection with the client handle
        FCMND (soc, 600) $INTB(handle) ;Deallocates handle
        stat = IOSTAT(soc)
        ;Check STATUS OF FCMND
        IF stat <0 THEN
          TYPE "Error from FCMND:", $ERROR(STATUS)
          RETURN
        END
        handle=0
      VALUE 101:; state OF the socket after a handle is closed
        TYPE "connection closed Handle =", handle
      ANY
        TYPE "ERROR int xmlrpc.srvr()"
        TYPE "Value OF stat not handled stat=",stat

    END

  END
  
.END


